1 - Diameter of Binary Tree

class Solution {
    private int height(TreeNode node , int[]diameter){
        if(node==null) return 0;
        int []left=new int[1];
        int []right=new int[1];
         left[0]=height(node.left,diameter);
         right[0]=height(node.right,diameter);
        diameter[0] =Math.max(diameter[0],left[0]+right[0]);
        return 1+Math.max(left[0],right[0]);

    }
    public int diameterOfBinaryTree(TreeNode root) {
        
        int []diameter=new int[1];
        height(root,diameter);
        return diameter[0];
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

2-  Symmetric Tree

class Solution {
    private boolean check(TreeNode left,TreeNode right){
        if(left==null && right==null) return true;
        if(left==null || right==null) return false;
        if(left.val!=right.val) return false;
       return check(left.left,right.right) && check(left.right,right.left);
    }
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return false;
        
        return check(root.left,root.right);
        
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

3-Zig Zag or Spiral Traversal

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        boolean flag=true;
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            List<Integer> row=new ArrayList<>(Collections.nCopies(size,0));
            for(int i=0;i<size;i++){
                TreeNode node=q.poll();
                int idx=flag?i:(size-1-i);
                row.set(idx,node.data);
                if(node.left!=null){
                    q.add(node.left);
                }
                if(node.right!=null){
                    q.add(node.right);
                }
            }
            flag=!flag;
            ans.add(row);
        }
        return ans;
    }
}
